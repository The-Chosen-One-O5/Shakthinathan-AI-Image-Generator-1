"use server"

import { createClient } from "@supabase/supabase-js"

// -----------------------------------------------------------------------------
// Safely create a Supabase client only when the required env-vars are present.
// -----------------------------------------------------------------------------
const SUPABASE_URL = process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY

export const supabase = SUPABASE_URL && SUPABASE_SERVICE_KEY ? createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY) : null

interface GenerateImageParams {
  prompt: string
  model: string
  size: string
  n: number
}

interface GenerateImageResponse {
  success: boolean
  images?: string[]
  error?: string
}

export async function generateImage(params: GenerateImageParams): Promise<GenerateImageResponse> {
  try {
    console.log("Generating image with params:", params)

    // Validate inputs
    if (!params.prompt || params.prompt.trim().length === 0) {
      return { success: false, error: "Prompt is required" }
    }

    if (params.prompt.length > 4000) {
      return { success: false, error: "Prompt must be less than 4000 characters" }
    }

    const requestBody = {
      model: params.model,
      prompt: params.prompt.trim(),
      n: Math.min(Math.max(params.n, 1), 4), // Ensure n is between 1-4
      size: params.size,
      response_format: "url",
    }

    console.log("Request body to Infip API:", requestBody)

    const response = await fetch("https://api.infip.pro/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer infip-ded52290",
        Accept: "application/json",
      },
      body: JSON.stringify(requestBody),
    })

    console.log("Infip API Response status:", response.status)
    console.log("Infip API Response headers:", Object.fromEntries(response.headers.entries()))

    const responseText = await response.text()
    console.log("Infip API Response text:", responseText)

    if (!response.ok) {
      if (response.status === 422) {
        try {
          const errorData = JSON.parse(responseText)
          const errorMessage = errorData.detail?.[0]?.msg || "Invalid request parameters"
          return { success: false, error: errorMessage }
        } catch {
          return { success: false, error: "Invalid request parameters" }
        }
      } else if (response.status === 401) {
        return { success: false, error: "Invalid API key or authentication failed" }
      } else if (response.status === 500) {
        // Check if it's the Google API 401 error
        if (responseText.includes("401 Unauthorized") && responseText.includes("googleapis.com")) {
          return {
            success: false,
            error:
              "Infip service authentication error. The service may be temporarily unavailable. Please try again later or contact support.",
          }
        }
        return { success: false, error: "Server error. Please try again later." }
      }
      return { success: false, error: `API error: ${response.status} - ${responseText}` }
    }

    let data
    try {
      data = JSON.parse(responseText)
    } catch (parseError) {
      console.error("Failed to parse Infip API response:", parseError)
      return { success: false, error: "Invalid response from Infip server" }
    }

    if (!data.data || !Array.isArray(data.data)) {
      return { success: false, error: "Invalid response format from Infip API" }
    }

    const images = data.data.map((item: any) => item.url).filter(Boolean)

    if (images.length === 0) {
      return { success: false, error: "No images generated by Infip API" }
    }

    // ──────────────────────────────────────────────────────────────────────────
    // Store generation in Supabase  (optional – only if a client is configured)
    // ──────────────────────────────────────────────────────────────────────────
    console.log("Supabase client status:", supabase ? "initialized" : "not initialized")
    if (supabase) {
      try {
        const payload = {
          prompt: params.prompt,
          model: params.model,
          size: params.size,
          count: params.n,
          images: images, // Pass the array directly for JSONB column
        }
        console.log("Attempting Supabase insert with payload:", payload)

        const { data: saved, error: dbError } = await supabase
          .from("image_generations")
          .insert([payload]) // Ensure payload is in an array
          .select("id") // Force Supabase to return data for success check

        if (dbError) {
          // Log the full error object to capture all properties
          console.error("Supabase insert error (full object):", dbError)
          // Also try to stringify it with a replacer to ensure all properties are captured
          console.error(
            "Supabase insert error (JSON stringified):",
            JSON.stringify(dbError, Object.getOwnPropertyNames(dbError)),
          )
          // Don’t fail the whole flow – user still gets the images
        } else {
          console.info("Image generation saved to Supabase. Row id:", saved?.[0]?.id)
        }
      } catch (insertException) {
        console.error("Supabase insert threw an unexpected exception:", insertException)
      }
    } else {
      console.warn("Supabase credentials missing – skipping DB persistence")
    }

    return { success: true, images }
  } catch (error) {
    console.error("Error generating image (overall catch):", error)
    return { success: false, error: "Network error or unexpected issue. Please check your connection and try again." }
  }
}

export async function getImageHistory() {
  if (!supabase) {
    return { success: true, data: [] }
  }

  try {
    const { data, error } = await supabase
      .from("image_generations")
      .select("*")
      .order("created_at", { ascending: false })
      .limit(50)

    if (error) {
      if (error.code === "42P01") {
        console.warn('[Supabase] Table "image_generations" does not exist. Run scripts/create-tables.sql')
        return { success: true, data: [] }
      }

      console.error("Database error:", error)
      return { success: false, error: error.message }
    }

    return { success: true, data: data || [] }
  } catch (err) {
    console.error("Error fetching history:", err)
    return { success: false, error: "Failed to fetch history" }
  }
}

export async function getAvailableModels() {
  try {
    const response = await fetch("https://api.infip.pro/v1/models", {
      method: "GET",
      headers: {
        Authorization: "Bearer infip-ded52290",
        Accept: "application/json",
      },
    })

    if (!response.ok) {
      console.error("Failed to fetch models:", response.status)
      return { success: false, error: `Failed to fetch models: ${response.status}` }
    }

    const data = await response.json()
    console.log("Available models:", data)

    return { success: true, models: data.data || [] }
  } catch (error) {
    console.error("Error fetching models:", error)
    return { success: false, error: "Failed to fetch available models" }
  }
}

export async function testApiConnection() {
  try {
    const response = await fetch("https://api.infip.pro/v1/models", {
      method: "GET",
      headers: {
        Authorization: "Bearer infip-ded52290",
        Accept: "application/json",
      },
    })

    const responseText = await response.text()
    console.log("API Test Response:", response.status, responseText)

    return {
      success: response.ok,
      status: response.status,
      response: responseText,
    }
  } catch (error) {
    console.error("API Test Error:", error)
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
    }
  }
}
